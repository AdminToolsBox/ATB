#!/bin/sh

############### FONCTIONS ###############

fonction_fichier()
{
printf "Chemin d'accès du fichier : "
read fichier
    if [[ -f $fichier && -n "$fichier" ]];then
        variable+=" $1 $fichier"
    elif [ -z "$fichier" ];then
        printf "Erreur, appuyez sur une touche pour recommencer...\n"
        read touche
            if [ "$touche" != * ];then
                exit
            fi
    else
        printf "Le fichier $fichier n'existe pas, appuyez sur une touche pour recommencer...\n"
        read touche
            if [ "$touche" != * ];then
                exit
            fi
    fi
fichier=""
choise=""
touche=""
}

###############

fonction_nombre()
{
if [ "$#" = 1 ];then
    printf "Nombre : "
else
    printf "$2 : "
fi
read nombre
    if [[ "$(echo $nombre | grep "^[ [:digit:] ]*$")" && -n "$nombre" ]];then
        variable+=" $1 $nombre"
    elif [ -z "$fichier" ];then
        printf "Erreur, appuyez sur une touche pour recommencer...\n"
        read touche
        if [ "$touche" != * ];then
            exit
        fi
    else
        printf "$nombre n'est pas un nombre, appuyez sur une touche pour recommencer...\n"
        read touche
            if [ "$touche" != * ];then
                exit
            fi
    fi
nombre=""
choise=""
touche=""
}

###############

fonction_repetehost()
{
printf "Hôte : "
read hote
    if [ -n "$hote" ];then
        variable+=" $1 $hote"
        printf "Souhaitez vous ajouter un autre hôte ? (y/N)"
        read autre
            while [ "$autre" = "y" ]
            do
                printf "Hôte : "
                read hote
                variable+=", $hote"
                printf "Souhaitez vous ajouter un autre hôte ? (y/N) : "
                read autre
            done
    else
        printf "Erreur, appuyez sur une touche pour recommencer...\n"
        read touche
            if [ "$touche" != * ];then
                exit
            fi
    fi
hote=""
autre=""
choise=""
touche=""
}

###############

fonction_repeteport()
{
printf "Port : "
read port
    if [ -n "$port" ];then
        variable+=" $port"
        printf "Souhaitez vous ajouter un autre port ? (y/N)"
        read autre
            while [ "$autre" = "y" ]
            do
                printf "Port : "
                read port
                variable+=" $port"
                printf "Souhaitez vous ajouter un autre port ? (y/N) : "
                read autre
            done
    else
        printf "Erreur, appuyez sur une touche pour recommencer...\n"
        read touche
            if [ "$touche" != * ];then
                exit
            fi
    fi
port=""
autre=""
choise=""
}

###############

fonction_hostport()
{
printf "Hôte[:Port] : "
read hoteport
    if [ -n "$hoteport" ];then
        variable+=" $1 $hoteport"
    else
        printf "Erreur, appuyez sur une touche pour recommencer...\n"
        read touche
            if [ "$touche" != * ];then
                exit
            fi
    fi
hoteport=""
autre=""
choise=""
touche=""
}

###############

fonction_choix()
{
choise=""
printf "\nChoix : "
read choise
    if [[ "$choise" -le "$#" && -n "$choise" ]];then
        variable+=" ${!choise}"
        if [ "$renseigneport" = "y" ];then
            printf "Port : "
            read port
                if [ -n "$port" ];then
                    variable+=" $port"
                    printf "Souhaitez vous ajouter un autre port ? (y/N)"
                    read autre
                    while [ "$autre" = "y" ]
                    do
                        printf "Port : "
                        read port
                        variable+=" $port"
                        printf "Souhaitez vous ajouter un autre port ? (y/N) : "
                        read autre
                    done
                else
                    printf "Erreur, appuyez sur une touche pour recommencer...\n"
                    read touche
                        if [ "$touche" != * ];then
                            exit
                        fi
                fi
        elif [ "$renseigneport" = "o" ];then
            choise=""
            printf "Souhaitez vous entrer un numéro de port ? (y/N) : "
            read choise
                if [ "$choise" = "y" ];then
                    printf "\nPort : "
                    read port
                    variable+=" $port"
                    choise=""
                    port=""
                elif [[ "$choise" = "n" || "$choise" = "N" || -z "$choise" ]];then
                    variable+=""
                else
                    printf "Erreur, appuyez sur une touche pour recommencer...\n"
                    read touche
                        if [ "$touche" != * ];then
                            exit
                        fi
                fi
        fi
    elif [ -z "$choise" ];then
        printf "Erreur, appuyez sur une touche pour recommencer...\n"
        read touche
            if [ "$touche" != * ];then
                exit
            fi
    else
        printf "Le choix $choise n'existe pas, appuyez sur une touche pour recommencer...\n"
        read touche
            if [ "$touche" != * ];then
                exit
            fi
    fi
port=""
autre=""
touche=""
renseigneport=""
choise=""
touche=""
}

###############

fonction_ecriture()
{
printf "$2"
read entree
    if [ -n "$entree" ];then
        variable+=" $1 $entree"
    fi
entree=""
choise=""
}

#########################################

variable="nmap"

menu()
{
clear;
choise=""
printf "Votre commande : $variable\n\n"
printf "Ce programme vous accompagne dans l'utilisation de la commande nmap.\n(Entrez \"q\" pour quiter le programme).\nQue souhaitez-vous faire ?\n"
printf "\n############### MENU ###############\n"
printf "\n 1 - SPÉCIFICATIONS DES CIBLES \n 2 - DÉCOUVERTE DES HÔTES \n 3 - TECHNIQUES DE SCAN \n 4 - SPÉCIFICATIONS DES PORTS ET ORDRE DE SCAN \n 5 - DÉTECTION DE SERVICE/VERSION \n 6 - SCRIPT SCAN \n 7 - DÉTECTION DE SYSTÈME D'EXPLOITATION \n 8 - TEMPORISATION ET PERFORMANCE \n 9 - ÉVASION PARE-FEU/IDS ET USURPATION D'IDENTITÉ \n10 - SORTIE \n11 - DIVERS \n12 - MODIFIER MANUELLEMENT COMMANDE \n q - QUITER PROGRAMME\n"
printf "\nChoix : "
read choise
case $choise in

    1)
    ############### SPÉCIFICATIONS DES CIBLES ###############
        menu_case1()
        {
        clear;
        choise=""
        printf "Votre commande : $variable\n\n"

        printf "############### SPÉCIFICATIONS DES CIBLES ###############\n\n"
        printf "Les cibles peuvent être spécifiées par des noms d'hôtes, des adresses IP, des adresses de réseaux, etc. \nExemple: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0-255.0-255.1-254"
        printf "\n\n1 - -iL <inputfilename>: Lit la liste des hôtes/réseaux cibles à partir du fichier \n2 - -iR <num hosts>: Choisit les cibles au hasard (0 pour infini) \n3 - --exclude <host1[,host2],host3],...>: Exclut des hôtes/réseaux du scan \n4 - --excludefile <exclude_file>: Exclut des hôtes/réseaux des cibles à partir du fichier \nq - SORTIR\n"
        printf "\nChoix : "
        read choise
        }

        while [ "$choise" != "q" ]
        do
        choise=""
        menu_case1
            case $choise in
                1)  choise="" fonction_fichier "-iL";;
                2)  choise="" fonction_nombre "-iR";;
                3)  choise="" fonction_repetehost "--exclude";;
                4)  choise="" fonction_fichier "-iR";;
                q)  choise="" menu;;
                *)  choise="" menu_case1;;
            esac
        done
    ;;

    2)
    ############### DÉCOUVERTE DES HÔTES ###############
        menu_case2()
        {
        clear;
        choise=""
        printf "Votre commande : $variable\n\n"

        printf "############### DÉCOUVERTE DES HÔTES ###############\n\n"
        printf "1 - -sL: List Scan - Liste simplement les cibles à scanner \n2 - -sP: Ping Scan - Ne fait que déterminer si les hôtes sont en ligne \n3 - -P0: Considère que tous les hôtes sont en ligne -- évite la découverte des hôtes \n4 - -PN: Considérer tous les hôtes comme étant connectés -- saute l'étape de découverte des hôtes \n5 - -PS/PA/PU [portlist]: Découverte TCP SYN/ACK ou UDP des ports en paramètre \n6 - -PE/PP/PM: Découverte de type requête ICMP echo, timestamp ou netmask \n7 - -PO [num de protocole]: Ping IP (par type) \n8 - -n/-R: Ne jamais résoudre les noms DNS/Toujours résoudre [résout les cibles actives par défaut] \n9 - --dns-servers <serv1[,serv2],...>: Spécifier des serveurs DNS particuliers \nq - SORTIR\n"

        printf "\nChoix : "
        read choise
        }

        while [ "$choise" != "q" ]
        do
        choise=""
        menu_case2
            case $choise in
                1)  choise="" variable+=" -sL";;
                2)  choise="" variable+=" -sP";;
                3)  choise="" variable+=" -P0";;
                4)  choise="" variable+=" -PN";;
                5)  choise="" printf "\n1 - -PS [portlist]: Découverte TCP SYN des ports en paramètre\n2 - -PA [portlist]: Découverte TCP ACK des ports en paramètre\n3 - -PU [portlist]: Découverte TCP UDP des ports en paramètre\n"
                    renseigneport="o"
                    fonction_choix "-PS" "-PA" "-PU";;
                6)  choise="" printf "\n1 - -PE: Découverte de type requête ICMP echo\n2 - -PP: Découverte de type requête ICMP timestamp\n3 - -PM: Découverte de type requête ICMP netmask\n"
                    fonction_choix "-PE" "-PP" "-PM";;
                7)  choise=""
                    entree="Entrez une adresse IP : "
                    fonction_ecriture "-PO" "$entree";;
                8)  choise="" printf "\n1 - -n: Ne jamais résoudre les noms DNS \n2 - -R: Toujours résoudre [résout les cibles actives par défaut]\n"
                    fonction_choix "-n" "-R";;
                9)  choise="" fonction_repetehost "--dns-servers";;
                q)  choise="" menu;;
                *)  choise="" menu_case2;;

            esac
        done
    ;;

    3)
    ############### TECHNIQUES DE SCAN ###############
        menu_case3()
        {
        clear;
        choise=""
        printf "Votre commande : $variable\n\n"

        printf "############### DÉCOUVERTE DES HÔTES ###############\n\n"
        printf "1 - -sS/sT/sA/sW/sM: Scans TCP SYN/Connect()/ACK/Window/Maimon \n2 - -sN/sF/sX: Scans TCP Null, FIN et Xmas \n3 - -sU: Scan UDP \n4 - --scanflags <flags>: Personnalise les flags des scans TCP \n5 - -sI <zombie host[:probeport]>: Idlescan (scan passif) \n6 - -sO: Scan des protocoles supportés par la couche IP \n7 - -b <ftp relay host>: Scan par rebond FTP \n8 - --traceroute: Détermine une route vers chaque hôte \n9 - --reason: Donne la raison pour laquelle tel port apparait à tel état \nq - SORTIR\n"

        printf "\nChoix : "
        read choise
        }

        while [ "$choise" != "q" ]
        do
        choise=""
        menu_case3
            case $choise in
                1)  choise="" printf "\n1 - -sS: Scans TCP SYN\n2 - -sT: Scans TCP Connect()\n3 - -sA: Scans TCP ACK\n4 - -sW: Scans TCP Window\n5 - -sM: Scans TCP Maimon\n"
                    fonction_choix "-sS" "-sT" "-sA" "-sW" "-sM";;
                2)  choise="" printf "\n1 - -sN: Scans TCP Null\n2 - -sF: Scans TCP FIN\n3 - -sX: Scans TCP Xmas\n"
                    fonction_choix "-sN" "-sF" "-sX";;
                3)  choise="" variable+=" -sU";;
                4)  choise=""
                    entree="Entrez un flag : "
                    fonction_ecriture "--scanflags" "$entree";;
                5)  choise=""
                    fonction_hostport "-sI";;
                6)  choise="" variable+=" -sO";;
                7)  choise=""
                    entree="Entrez un relay FTP : "
                    fonction_ecriture "-b" "$entree";;
                8)  choise="" variable+=" --traceroute";;
                9)  choise="" variable+=" --reason";;
                q)  choise="" menu;;
                *)  choise="" menu_case3;;

            esac
        done
    ;;

    4)
    ############### SPÉCIFICATIONS DES PORTS ET ORDRE DE SCAN ###############
        menu_case4()
        {
        clear;
        choise=""
        printf "Votre commande : $variable\n\n"

        printf "############### SPÉCIFICATIONS DES PORTS ET ORDRE DE SCAN ###############\n\n"
        printf "1 - -p <plage de ports>: Ne scanne que les ports spécifiés \n2 - -F: Fast - Ne scanne que les ports listés dans le fichier nmap-services \n3 - -r: Scan séquentiel des ports, ne mélange pas leur ordre \n4 - --top-ports <nombre>: Scan <nombre> de ports parmis les plus courants \n5 - --port-ratio <ratio>: Scan <ratio> pourcent des ports les plus courants \nq - SORTIR\n"

        printf "\nChoix : "
        read choise
        }

        while [ "$choise" != "q" ]
        do
        choise=""
        menu_case4
            case $choise in
                1)  choise=""
#                    printf "Renseignez l'option selon l'exemple :\n-p22; -p1-65535; -pU:53,111,137,T:21-25,80,139,8080\nOption : "
#                    read option ;;
#                    if [[ "$(echo $option | grep "^[ [:digit:] ]*$")" && -n "$option" ]];then
#                        printf "ca marche"
#                        read
#                    fi
;;
                2)  choise="" variable+=" -F";;
                3)  choise="" variable+=" -r";;
                4)  choise="" fonction_nombre "--top-ports";;
                5)  choise="" fonction_nombre "--port-ratio" "Ratio";;
                q)  choise="" menu;;
                *)  choise="" menu_case4;;

            esac
        done
    ;;

    q)  choise="" exit 0;;
    *)	choise="" menu;;
esac
}

choise=""
menu
