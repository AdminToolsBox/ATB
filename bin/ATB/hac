#!/bin/bash

## \file hac
## \author Florian Beaulieu
## \brief Host alive network scanner
## \version 1.0
## \date November 27th 2014
## \param PATHEXEC Save the path of the script.
## \param TMP Temporary file /tmp/list"PID of the script".
## \param NET Network address.
## \param IP IP Address.
## \param MASK Mask Address.
## \param BCAST Broadcast address
## \param NEb1 First byte of the Network address
## \param NEb2 Second byte of the Network address
## \param NEb3 Third byte of the Network address
## \param NEb4 Fourth byte of the Network address
##
## This script automaticaly scan your network to list all hosts alive's IP address.

## \cond DUMMY

#This line saves the execution path of the command in PATHEXEC.
#Usefull if we whant to run the script whithout installing it.
PATHEXEC=`echo $( cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P )`

#This line imports the library "alxdr-lib" using a relative path thanks to the $PATHEXEC variable.
source $PATHEXEC/../../lib/ATB/alxdr-lib

#Creation of a temporary file in order to stok the result of the "nmap" command.
#The command "trap" removes the temp file at the end of the script. 
TEMP="/tmp/list"`pidof $0`
trap "rm -f $TEMP" 0 1 2 5 9 15

## \endcond

## \fn chooseInterface
## \brief Automaticaly choose the interface to use for the network's scan.
## \return 0 - Normal end.
chooseInterface()
{
	# If not present, internationnalization doesn't work.
	export TEXTDOMAIN=hac
	# Find IP, Broadcast and Mask address
	IP=`ifconfig | grep -v "127.0.0.1" | grep "inet ad" | tr -s " " | cut -d " " -f 3 | cut -d ":" -f 2`
	BCAST=`ifconfig | grep -v "127.0.0.1" | grep "inet ad" | tr -s " " | cut -d " " -f 4 | cut -d ":" -f 2`
	MASK=`ifconfig | grep -v "127.0.0.1" | grep "inet ad" | tr -s " " | cut -d " " -f 5 | cut -d ":" -f 2`
	i18n_display "Scanning"
	return 0
}

## \fn calcNetAddr
## \brief Cut IP end Mask Address into bytes to calculate the Network address
## \param IPb1 First byte of the IP address
## \param IPb2 Second byte of the IP address
## \param IPb3 Third byte of the IP address
## \param IPb4 Fourth byte of the IP address
## \param MAb1 First byte of the Mask address
## \param MAb2 Second byte of the Mask address
## \param MAb3 Third byte of the Mask address
## \param MAb4 Fourth byte of the Mask address
## \return 0 - Normal end
calcNetAddr()
{
	#Cut the IP Address into bytes.
	local IPb1=`echo $IP | cut -d "." -f 1`
	local IPb2=`echo $IP | cut -d "." -f 2`
	local IPb3=`echo $IP | cut -d "." -f 3`
	local IPb4=`echo $IP | cut -d "." -f 4`
	#Cut the Mask into bytes.
	local MAb1=`echo $MASK | cut -d "." -f 1`
	local MAb2=`echo $MASK | cut -d "." -f 2`
	local MAb3=`echo $MASK | cut -d "." -f 3`
	local MAb4=`echo $MASK | cut -d "." -f 4`
	#Calculate the Net Adddres by doing a AND between the IP end the Mask.
	NEb1=$(( $IPb1 & $MAb1 ))
	NEb2=$(( $IPb2 & $MAb2 ))
	NEb3=$(( $IPb3 & $MAb3 ))
	NEb4=$(( $IPb4 & $MAb4 ))
	#Format the Net address.
	NET="$NEb1.$NEb2.$NEb3.$NEb4"

	return 0
}

## \fn listIP
## \brief Cut the broadcast address into bytes and list all the IP address connected on the network.
## \param BCb1 First byte of the Broadcast address
## \param BCb2 Second byte of the Broadcast address
## \param BCb3 Third byte of the Broadcast address
## \param BCb4 Fourth byte of the Broadcast address
## \return 0 - Normal end
listIP()
{
	# Cut the broadcast address into bytes
	local BCb1=`echo $BCAST | cut -d "." -f 1`
	local BCb2=`echo $BCAST | cut -d "." -f 2`
	local BCb3=`echo $BCAST | cut -d "." -f 3`
	local BCb4=`echo $BCAST | cut -d "." -f 4`
	# Test the IP and save them into a temporaty file.
	nmap -n -sP "$NEb1-$BCb1.$NEb2-$BCb2.$NEb3-$BCb3.$NEb4-$BCb4" | grep "Nmap scan report" | cut -d " " -f 5 > $TEMP
	return 0
}

## \fn display
## \brief Display the information on the screen.
## \return 0 - Normal end
display()
{
	export TEXTDOMAIN=hac
	clear
	i18n_display "IPAddress" $IP
	i18n_display "BCASTAddress" $BCAST
	i18n_display "Mask" $MASK
	i18n_display "NETAddress" $NET
	echo -e "\n"
	i18n_display "HostsIP"
	cat $TEMP
	
	return 0
}

## \cond DUMMY

alxdr_config
alxdr_checkInstalled "nmap"
if [ $? -ne 0 ]; then
	exit $?
else
	clear
	chooseInterface
	calcNetAddr
	listIP
	display
fi
	
exit 0

## \endcond DUMMY

